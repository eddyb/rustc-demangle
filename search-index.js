var N=null,E="",T="t",U="u",searchIndex={};
var r_aa="rustc_demangle",r_ba="demangle",r_ca="result",r_da="self",r_ea="try_from",r_fa="try_into",r_ga="borrow",r_ha="borrow_mut",r_ia="get_type_id",r_ja="typeid",r_ka="trydemangleerror",r_la="formatter",r_ma="Demangle",r_na="TryDemangleError";

searchIndex[r_aa]={"doc":"Demangle Rust compiler symbol names.","i":[[3,r_ma,r_aa,"Representation of a demangled symbol name.",N,N],[3,r_na,E,"Error returned from the `try_demangle` function below when…",N,N],[5,r_ba,E,"De-mangles a Rust symbol into a more readable version",N,[[["str"]],[r_ba]]],[5,"try_demangle",E,"The same as `demangle`, except return an `Err` if the…",N,[[["str"]],[r_ca,[r_ba,r_ka]]]],[11,"as_str",E,"Returns the underlying string that's being demangled.",0,[[[r_da]],["str"]]],[11,r_ea,E,E,0,[[[U]],[r_ca]]],[11,"from",E,E,0,[[[T]],[T]]],[11,r_fa,E,E,0,[[[r_da]],[r_ca]]],[11,"into",E,E,0,[[[r_da]],[U]]],[11,r_ga,E,E,0,[[[r_da]],[T]]],[11,r_ha,E,E,0,[[[r_da]],[T]]],[11,r_ia,E,E,0,[[[r_da]],[r_ja]]],[11,r_ea,E,E,1,[[[U]],[r_ca]]],[11,"from",E,E,1,[[[T]],[T]]],[11,r_fa,E,E,1,[[[r_da]],[r_ca]]],[11,"into",E,E,1,[[[r_da]],[U]]],[11,r_ga,E,E,1,[[[r_da]],[T]]],[11,r_ha,E,E,1,[[[r_da]],[T]]],[11,r_ia,E,E,1,[[[r_da]],[r_ja]]],[11,"clone",E,E,1,[[[r_da]],[r_ka]]],[11,"fmt",E,E,0,[[[r_da],[r_la]],[r_ca]]],[11,"fmt",E,E,1,[[[r_da],[r_la]],[r_ca]]],[11,"fmt",E,E,0,[[[r_da],[r_la]],[r_ca]]]],"p":[[3,r_ma],[3,r_na]]};
initSearch(searchIndex);addSearchOptions(searchIndex);